# -*- coding: utf-8 -*-
"""Projeto_Alura_IA-Gemini.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cHaTMI-GLy1FvsPdpZIAON0JlPAIffU0
"""

# Commented out IPython magic to ensure Python compatibility.
# Instala as bibliotecas necess√°rias
# %pip -q install google-genai google-adk requests folium
# %pip -q install tabulate
# %pip -q install pandas

# Commented out IPython magic to ensure Python compatibility.
# Instala as bibliotecas necess√°rias
# %pip -q install google-genai google-adk requests

# Importa as bibliotecas
import os
from google.colab import userdata
from google import genai
from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types
from datetime import date
import textwrap
from IPython.display import display, Markdown, HTML
import requests
import warnings
from tabulate import tabulate
import pandas as pd


warnings.filterwarnings("ignore")

os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')

from google import genai

client = genai.Client()

MODEL_ID = "gemini-2.0-flash"

# Fun√ß√£o auxiliar que envia uma mensagem para um agente via Runner e retorna a resposta final
# Esta fun√ß√£o simula a execu√ß√£o de um agente em uma sess√£o.
def call_agent(agent: Agent, message_text: str) -> str:

    session_service = InMemorySessionService()
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    print(f"ü§ñ Executando Agente: {agent.name}...")
    try:
        for event in runner.run(user_id="user1", session_id="session1", new_message=content):
            if event.is_final_response():
              for part in event.content.parts:
                if part.text is not None:
                  final_response += part.text
                  final_response += "\n"

        print(f"‚úÖ Execu√ß√£o do Agente {agent.name} conclu√≠da.")
    except Exception as e:
        print(f"‚ùå Erro durante a execu√ß√£o do Agente {agent.name}: {e}")
        final_response = f"Ocorreu um erro ao processar sua solicita√ß√£o com o agente {agent.name}. Detalhes: {e}"

    return final_response


def to_markdown(text):
  text = text.replace('‚Ä¢', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

def display_search_info(response):

    try:
        if response and response.candidates and response.candidates[0].grounding_metadata:
            print(f"ÔøΩÔøΩ Busca realizada: {response.candidates[0].grounding_metadata.web_search_queries}")
            if response.candidates[0].grounding_metadata.grounding_chunks:
                 print(f"ÔøΩÔøΩ P√°ginas utilizadas na resposta: {', '.join([site.web.title for site in response.candidates[0].grounding_metadata.grounding_chunks if site.web])}")
            print()
            if response.candidates[0].grounding_metadata.search_entry_point:
                 display(HTML(response.candidates[0].grounding_metadata.search_entry_point.rendered_content))
        else:
            print("‚ÑπÔ∏è Nenhuma informa√ß√£o de busca dispon√≠vel para esta resposta.")
    except Exception as e:
        print(f"‚ö†Ô∏è N√£o foi poss√≠vel exibir as informa√ß√µes de busca: {e}")

# Fun√ß√£o auxiliar para exibir texto formatado em Markdown no Colab
def to_markdown(text):
  text = text.replace('‚Ä¢', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

# --- Agente 1: Buscador de Supermercados Proximos--- #
#####################################################

def agente_supermercados_proximos(produto: str, localizacao: str) -> str:
    buscador_supermercados = Agent(
        name="agente_buscador_supermercados",
        model="gemini-2.0-flash",
        instruction=f"""
        Voc√™ √© um assistente de localiza√ß√£o de Supermercados. Sua miss√£o √© utilizar a ferramenta de busca do Google (google_search)
        para encontrar Supermercados pr√≥ximos √† localiza√ß√£o fornecida pelo usu√°rio.
        Busque por "Supermercados perto de {localizacao}" ou "Supermercados em {localizacao}".
        Para cada Supermercado encontrado nos resultados da busca, indentifique e extraia o nome, endere√ßo e, **principalmente, o n√∫mero de telefone**.
        Liste cada Supermercado encontrado com seus telefones de forma clara e sucinta.
        Caso n√£o encontre telefones para algum Supermercado, informe o usu√°rio
        Caso n√£o encontre nenhum Supermercado na busca, informe o usu√°rio.
        Sua principal miss√£o √© listar os supermercados que parecem mais relevantes ou mais pr√≥ximos com base nos resultados da busca.
        """,
        description="Agente que busca Supermercados pr√≥ximos e seus telefones usando Google Search.",
        tools=[google_search]
    )

    entrada_do_agente = f"Encontre Supermercados Proximos de {localizacao} que possam ter {produto}. Liste os nomes, endere√ßos e telefones."

    resultados_busca = call_agent(buscador_supermercados, entrada_do_agente)


    return resultados_busca

# --- Agente 2: Comparador de Pre√ßos de Produtos --- #
########################################################

def agente_comparador_precos(produto: str) -> str:
    comparador_precos = Agent(
        name="agente_comparador_precos",
        model="gemini-2.0-flash",
        instruction=f"""
        Voc√™ √© um assistente de compara√ß√£o de pre√ßos de Produtos. Sua miss√£o √© usar a ferramenta de busca do Google (google_search)
        para encontrar o pre√ßo do Produto "{produto}" em diferentes Supermercados,sites de compara√ß√£o de pre√ßos e em ou outras fontes confi√°veis.
        Busque por "{produto} pre√ßo", "{produto} onde comprar mais barato", etc.
        Analise os resultados da busca para identificar os pre√ßos listados e as fontes (Supermercados, sites, folhetos online).
        Liste os pre√ßos encontrados, indicando a fonte (nome do Supermercado /site).
        **Identifique claramente a op√ß√£o mais barata encontrada** e mencione a fonte.
        Caso n√£o encontre as informa√ß√µes de pre√ßo, informe o usu√°rio.
        """,
        description="Agente que busca e compara pre√ßos de Produtos usando Google Search.",
        tools=[google_search]
    )

    entrada_do_agente = f"Compare os pre√ßos do Produto {produto} e encontre a op√ß√£o mais barata."

    resultados_comparacao = call_agent(comparador_precos, entrada_do_agente)

    return resultados_comparacao

# --- Fluxo Principal de Execu√ß√£o --- #
##########################################

print("üöÄ Iniciando o Sistema de Busca de Supermercados e Produtos üöÄ")

# --- Obter Input do Usu√°rio ---
produtos_buscados = []
continuar = "sim"

while continuar.lower() == "sim":
    produto = input("‚ùì Digite o NOME do produto que voc√™ procura: ")
    produtos_buscados.append(produto)
    continuar = input("‚ûï Deseja adicionar mais um produto? (sim/n√£o): ")

print("\nOs produtos que voc√™ procura s√£o:")
for i, produto in enumerate(produtos_buscados):
    print(f"{i+1}. {produto}")

# Solicita a localiza√ß√£o do usu√°rio
localizacao_usuario = input("üìç Por favor, digite sua LOCALIZA√á√ÉO (ex: 'S√£o Paulo, Jardim Paulista', 'CEP 01402-001'): ")

# Verifica se as entradas foram fornecidas
if not produtos_buscados or not localizacao_usuario:
    print("‚ùå Voc√™ esqueceu de digitar o nome do Produto ou sua localiza√ß√£o!")
else:
    print(f"\nMaravilha! Vamos buscar informa√ß√µes sobre '{produtos_buscados} 'perto de '{localizacao_usuario}'.")

    # --- Etapa 1: Buscar Supermercados Pr√≥ximos ---
    print("\n--- üè• Executando Agente 1 (Buscador de Supermercados) ---")
    supermercado_encontrados = agente_supermercados_proximos(produtos_buscados, localizacao_usuario)
    print("\n--- ‚úÖ Resultado do Agente 1 (Supermercados Encontrados) ---\n")
    display(to_markdown(supermercado_encontrados))
    print("--------------------------------------------------------------")

    # --- Etapa 2: Comperando os Pre√ßos dos Produtos Informados ---
    print("\n--- üí∞ Executando Agente 2 (Comparador de Pre√ßos) ---")
    precos_comparados = agente_comparador_precos(produtos_buscados)
    print("\n--- ‚úÖ Resultado do Agente 2 (Compara√ß√£o de Pre√ßos) ---\n")
    variavel1 = [precos_comparados]
    tabela_dados = list(zip(variavel1))
    cabecalhos = ["Compara√ß√£o de Pre√ßo dos Produtos Informados"]
    print(tabulate(tabela_dados, headers=cabecalhos, tablefmt="fancy_grid"))
    print("--------------------------------------------------------------")

    print("\nüéâ Processo conclu√≠do!")